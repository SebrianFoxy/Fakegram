definitions:
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.RefreshRequest:
    properties:
      refresh_rotate:
        type: boolean
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RegistrationRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      surname:
        type: string
    required:
    - email
    - name
    - password
    - surname
    type: object
  models.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  models.UserResponse:
    properties:
      approved:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      surname:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: API с JWT авторизацией
  title: Fakegram API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Проверяет email и пароль
      parameters:
      - description: Данные для авторизации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный формат запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверный email или пароль
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Авторизация пользователя
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновляет access токен или оба токена с помощью refresh токена
      parameters:
      - description: Данные для обновления токенов
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление токенов
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Неверный формат запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Невалидный или просроченный refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновление токенов
      tags:
      - auth
  /api/v1/auth/registration:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя в системе
      parameters:
      - description: Данные пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь создан
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Неверный формат данных
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Email уже существует
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация
      tags:
      - auth
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе на основе JWT токена
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Неавторизован
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить текущего пользователя
      tags:
      - users
  /api/v1/users/all_users:
    get:
      consumes:
      - application/json
      description: Возвращает список пользователей с поддержкой пагинации
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Количество записей на странице
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить пользователей
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
